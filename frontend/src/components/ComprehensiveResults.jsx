import React, { useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Tabs,
  Tab,
  Grid,
  Card,
  CardContent,
  Button,
  Chip,
  Stack,
  Alert,
  CircularProgress
} from '@mui/material';
import {
  ContentCopy,
  CheckCircle,
  Psychology,
  Science,
  AttachMoney,
  Policy,
  TrendingUp,
  RecordVoiceOver,
  Gavel,
  Analytics,
  Download,
  Refresh,
  ArrowBack,
  Info
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import toast from 'react-hot-toast';
import { useAuth } from '../services/authContext';
import { FEATURES, hasFeatureAccess, showUpgradeToast } from '../utils/featureAccess';
import { 
  formatWithEvidence, 
  determineEvidenceLevel, 
  formatImprovementWithEvidence,
  getEvidenceStyling,
  EVIDENCE_LEVELS 
} from '../utils/evidenceUtils';

const analysisTools = [
  { id: 'overview', label: 'Overview', icon: Analytics, color: '#7C3AED' },
  { id: 'compliance', label: 'Compliance', icon: Policy, color: '#DC2626' },
  { id: 'ab-tests', label: 'A/B Tests', icon: Science, color: '#059669' },
  { id: 'psychology', label: 'Psychology', icon: Psychology, color: '#7C2D12' },
  { id: 'roi', label: 'ROI', icon: AttachMoney, color: '#B45309' },
  { id: 'industry', label: 'Industry', icon: TrendingUp, color: '#0369A1' },
  { id: 'performance', label: 'Performance', icon: TrendingUp, color: '#15803D' },
  { id: 'brand-voice', label: 'Brand Voice', icon: RecordVoiceOver, color: '#9333EA' },
  { id: 'legal', label: 'Legal Risk', icon: Gavel, color: '#BE123C' }
];

const ComprehensiveResults = ({ results, adCopy, platform, onBack, onFurtherImprove }) => {
  const { user, subscription } = useAuth();
  const [activeTab, setActiveTab] = useState('overview');
  const [isImproving, setIsImproving] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  
  // Check if user has access to further improve feature
  const hasFurtherImproveAccess = hasFeatureAccess(FEATURES.FURTHER_IMPROVE, subscription);

  // Determine evidence level for this analysis
  const isAIPowered = results?.ai_powered || false;
  const evidenceLevel = determineEvidenceLevel({ 
    isSimulated: !isAIPowered, // If AI-powered, not simulated
    sampleSize: results?.sample_size || 0,
    confidence: results?.confidence || 0,
    evidenceLevel: results?.evidence_level || (isAIPowered ? 'high' : 'low')
  });

  // Map alternatives to abTests.variations if not already mapped
  React.useEffect(() => {
    console.log('📦 ComprehensiveResults received:', { results, adCopy, platform });
    console.log('📦 results.alternatives:', results?.alternatives);
    console.log('📦 results.abTests?.variations:', results?.abTests?.variations);
    
    // If alternatives exist but abTests doesn't, map them
    if (results?.alternatives && !results?.abTests?.variations) {
      console.log('⚠️ Mapping alternatives to abTests.variations...');
      results.abTests = {
        variations: results.alternatives.map((alt, index) => ({
          angle: alt.variant_type || `Variation ${index + 1}`,
          copy: `${alt.headline}\n\n${alt.body_text}${alt.cta ? '\n\n' + alt.cta : ''}`,
          generated_body_text: alt.body_text,
          strategy: alt.improvement_reason,
          improvement_reason: alt.improvement_reason,
          predictedCTR: alt.predicted_score || 75
        }))
      };
      console.log('✅ Mapped', results.abTests.variations.length, 'alternatives to abTests.variations');
    }
    
    console.log('Improved copy:', results?.improved?.copy);
    console.log('Evidence level:', evidenceLevel);
  }, [results, adCopy, platform, evidenceLevel]);

  const copyToClipboard = async (text, label = '') => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success(`${label || 'Text'} copied!`);
    } catch (err) {
      toast.error('Failed to copy');
    }
  };

  const handleExportReport = async () => {
    setIsExporting(true);
    try {
      // Create a simple text-based report
      const reportContent = `
AD ANALYSIS REPORT
==================

Original Score: ${results.original?.score || 60}/100
Improved Score: ${results.improved?.score || 71}/100
Improvement: +${((results.improved?.score || 71) - (results.original?.score || 60))}

ORIGINAL AD:
${results.original?.copy || adCopy}

IMPROVED AD:
${results?.improved?.copy || results?.improved || 'Optimized ad copy'}

KEY IMPROVEMENTS:
${results?.keyImprovements?.join('\n- ') || 'Optimization recommendations applied'}

---
Generated by AdCopySurge
`;
      
      // Create a downloadable file
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `ad-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      
      toast.success('Report exported successfully!');
    } catch (error) {
      console.error('Export error:', error);
      toast.error('Failed to export report');
    } finally {
      setIsExporting(false);
    }
  };

  const handleFurtherImprove = async () => {
    if (!hasFurtherImproveAccess) {
      showUpgradeToast(FEATURES.FURTHER_IMPROVE, subscription, {
        showBenefits: true,
        customMessage: 'Take your ad optimization to the next level with iterative improvements!'
      });
      return;
    }
    
    if (!onFurtherImprove) {
      toast.error('Further improvement not available');
      return;
    }
    
    setIsImproving(true);
    try {
      // Use the improved copy as the new baseline
      const currentCopy = results?.improved?.copy || results?.improved || adCopy;
      await onFurtherImprove(currentCopy);
      toast.success('Generating further improvements...');
    } catch (error) {
      console.error('Further improve error:', error);
      toast.error('Failed to generate further improvements');
    } finally {
      setIsImproving(false);
    }
  };

  const renderOverviewTab = () => (
    <Box>

      {/* Score Comparison */}
      <Grid container spacing={1.5} sx={{ mb: 2 }}>
        <Grid item xs={12} md={6}>
          <Card 
            elevation={0}
            sx={{ 
              height: '100%',
              border: '1px solid',
              borderColor: 'warning.main'
            }}
          >
            <CardContent sx={{ p: 1.5, '&:last-child': { pb: 1.5 } }}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="caption" sx={{ fontWeight: 700, color: 'warning.main', letterSpacing: 0.5, fontSize: '0.7rem' }}>
                  ORIGINAL
                </Typography>
                <Chip 
                  label={`${results.original?.score || 60}/100`}
                  size="small"
                  sx={{ 
                    bgcolor: 'warning.main',
                    color: 'white',
                    fontWeight: 700,
                    height: 20,
                    fontSize: '0.7rem'
                  }}
                />
              </Box>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 1.5, 
                  bgcolor: 'background.paper',
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 1,
                  minHeight: 80,
                  maxHeight: 120,
                  overflow: 'auto'
                }}
              >
                <Typography 
                  variant="body2" 
                  sx={{ 
                    lineHeight: 1.4,
                    color: 'text.secondary',
                    fontSize: '0.8rem'
                  }}
                >
                  {results.original?.copy || adCopy}
                </Typography>
              </Paper>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={6}>
          <Card 
            elevation={0}
            sx={{ 
              height: '100%',
              border: '2px solid',
              borderColor: 'success.main',
              bgcolor: 'rgba(16, 185, 129, 0.03)'
            }}
          >
            <CardContent sx={{ p: 1.5, '&:last-child': { pb: 1.5 } }}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Box display="flex" alignItems="center" gap={0.5}>
                  <CheckCircle sx={{ color: 'success.main', fontSize: 14 }} />
                  <Typography variant="caption" sx={{ fontWeight: 700, color: 'success.main', letterSpacing: 0.5, fontSize: '0.7rem' }}>
                    IMPROVED
                  </Typography>
                </Box>
                <Chip 
                  label={`${results.improved?.score || 71}/100`}
                  size="small"
                  sx={{ 
                    bgcolor: 'success.main',
                    color: 'white',
                    fontWeight: 700,
                    height: 20,
                    fontSize: '0.7rem'
                  }}
                />
              </Box>
              <Paper 
                elevation={0}
                sx={{ 
                  p: 1.5, 
                  bgcolor: 'white',
                  border: '2px solid',
                  borderColor: 'success.main',
                  borderRadius: 1,
                  minHeight: 80,
                  maxHeight: 120,
                  overflow: 'auto'
                }}
              >
                <Typography 
                  variant="body2" 
                  sx={{ 
                    lineHeight: 1.4,
                    color: '#1a1a1a',
                    fontWeight: 600,
                    fontSize: '0.85rem'
                  }}
                >
                  {results?.improved?.copy || results?.improved || 'Optimized ad copy will appear here'}
                </Typography>
              </Paper>
              <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                <Button
                  variant="contained"
                  color="success"
                  size="small"
                  startIcon={<ContentCopy sx={{ fontSize: 14 }} />}
                  onClick={() => copyToClipboard(results.improved?.copy || adCopy, 'Improved Version')}
                  sx={{ 
                    py: 0.5,
                    fontSize: '0.75rem',
                    fontWeight: 700,
                    minWidth: '110px',
                    maxWidth: '140px'
                  }}
                >
                  Copy Improved
                </Button>
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={isImproving ? <CircularProgress size={14} /> : <Refresh sx={{ fontSize: 14 }} />}
                  onClick={handleFurtherImprove}
                  disabled={!results || (results.improvementCount >= 4) || isImproving || !hasFurtherImproveAccess}
                  sx={{ 
                    py: 0.5,
                    fontSize: '0.7rem',
                    fontWeight: 600,
                    flex: 1,
                    minWidth: '140px',
                    whiteSpace: 'nowrap',
                    ...(!hasFurtherImproveAccess && {
                      color: 'text.disabled',
                      borderColor: 'grey.300'
                    })
                  }}
                >
                  {isImproving ? 'Improving...' : 
                   results?.improvementCount >= 4 ? 'Max' : 
                   !hasFurtherImproveAccess ? '⭐ Pro Feature' : 
                   `Further Improve (${results?.improvementCount || 0}/4)`}
                </Button>
              </Stack>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Key Improvements */}
      {results.improved?.improvements && results.improved.improvements.length > 0 && (
        <Card elevation={0} sx={{ mb: 1.5, border: '1px solid', borderColor: 'divider' }}>
          <CardContent sx={{ p: 1.5, '&:last-child': { pb: 1.5 } }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 700, mb: 1, display: 'flex', alignItems: 'center', gap: 0.5, fontSize: '0.8rem' }}>
              <TrendingUp sx={{ fontSize: 14 }} color="primary" />
              Key Improvements
            </Typography>
            <Stack spacing={0.75}>
              {results.improved.improvements.map((improvement, index) => (
                <Box
                  key={index}
                  sx={{
                    p: 1.25,
                    borderRadius: 1,
                    bgcolor: 'rgba(124, 58, 237, 0.04)',
                    borderLeft: '3px solid',
                    borderColor: 'primary.main',
                    transition: 'all 0.2s',
                    '&:hover': {
                      bgcolor: 'rgba(124, 58, 237, 0.08)',
                      transform: 'translateX(2px)'
                    }
                  }}
                >
                  <Typography variant="subtitle2" sx={{ fontWeight: 700, color: 'primary.main', mb: 0.25, fontSize: '0.75rem' }}>
                    {improvement.category}
                  </Typography>
                  <Typography variant="body2" sx={{ color: 'text.secondary', lineHeight: 1.5, fontSize: '0.75rem' }}>
                    {improvement.description}
                  </Typography>
                </Box>
              ))}
            </Stack>
          </CardContent>
        </Card>
      )}

      {/* Quick Stats */}
      <Grid container spacing={1}>
        {[
          { label: 'Compliance', value: results.compliance?.status || 'PENDING', color: 'success', icon: Policy },
          { label: 'A/B Tests', value: `${results.abTests?.variations?.length || 0} Ready`, color: 'info', icon: Science },
          { label: 'Psychology Score', value: `${results.psychology?.overallScore || 0}/100`, color: 'warning', icon: Psychology },
          { label: 'Legal Risk', value: results.legal?.riskLevel || 'Low', color: 'error', icon: Gavel }
        ].map((stat, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <Card 
              elevation={0}
              sx={{ 
                border: '1px solid',
                borderColor: 'divider',
                cursor: 'pointer',
                transition: 'all 0.2s',
                '&:hover': {
                  borderColor: `${stat.color}.main`,
                  boxShadow: `0 4px 12px rgba(124, 58, 237, 0.15)`
                }
              }}
            >
              <CardContent sx={{ textAlign: 'center', py: 1.25, px: 1, '&:last-child': { pb: 1.25 } }}>
                <stat.icon sx={{ fontSize: 24, color: `${stat.color}.main`, mb: 0.5 }} />
                <Typography variant="caption" color="text.secondary" display="block" sx={{ mb: 0.25, fontSize: '0.65rem' }}>
                  {stat.label}
                </Typography>
                <Typography variant="subtitle2" sx={{ fontWeight: 700, fontSize: '0.85rem' }}>
                  {stat.value}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );

  const renderComplianceTab = () => (
    <Box>
      <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
        <CardContent sx={{ p: 2 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6" sx={{ fontWeight: 700 }}>
              Compliance Status
            </Typography>
            <Chip
              label={results.compliance?.status || 'COMPLIANT'}
              color={results.compliance?.status === 'COMPLIANT' ? 'success' : 'warning'}
              sx={{ fontWeight: 700 }}
            />
          </Box>
          
          {results.compliance?.issues && results.compliance.issues.length > 0 ? (
            <Stack spacing={2}>
              {results.compliance.issues.map((issue, index) => (
                <Paper key={index} sx={{ p: 2, bgcolor: 'warning.light', border: '1px solid', borderColor: 'warning.main' }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 700, color: 'warning.dark', mb: 1 }}>
                    {issue.level}: {issue.title}
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    {issue.description}
                  </Typography>
                  <Box sx={{ bgcolor: 'white', p: 1, borderRadius: 1, mb: 1 }}>
                    <Typography variant="caption" color="error">
                      Problematic: "{issue.problematicText}"
                    </Typography>
                  </Box>
                  <Box sx={{ bgcolor: 'white', p: 1, borderRadius: 1 }}>
                    <Typography variant="caption" color="success.dark">
                      Suggested: "{issue.suggestedFix}"
                    </Typography>
                  </Box>
                </Paper>
              ))}
            </Stack>
          ) : (
            <Box textAlign="center" py={4}>
              <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />
              <Typography variant="body1" color="success.dark">
                No compliance issues detected! Your ad copy follows platform guidelines.
              </Typography>
            </Box>
          )}
        </CardContent>
      </Card>
    </Box>
  );

  const renderPsychologyTab = () => (
    <Box>
      <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
        <CardContent sx={{ p: 2 }}>
          <Typography variant="h6" sx={{ fontWeight: 700, mb: 2 }}>
            Psychology Score: {results.psychology?.overallScore || 0}/100
          </Typography>
          
          <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 2 }}>
            Psychological Triggers Analysis
          </Typography>
          
          <Stack spacing={2}>
            {(results.psychology?.triggers || [
              { name: 'Urgency/Scarcity', score: 7, feedback: 'Good use of time pressure' },
              { name: 'Social Proof', score: 4, feedback: 'Could add testimonials or user count' },
              { name: 'Emotional Appeal', score: 8, feedback: 'Strong emotional connection' },
              { name: 'Authority', score: 5, feedback: 'Add expert endorsements or certifications' },
              { name: 'Reciprocity', score: 6, feedback: 'Consider offering free value upfront' }
            ]).map((trigger, index) => (
              <Box key={index}>
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={0.5}>
                  <Typography variant="body2" sx={{ fontWeight: 600 }}>
                    {trigger.name}
                  </Typography>
                  <Chip
                    label={`${trigger.score}/10`}
                    size="small"
                    color={trigger.score >= 7 ? 'success' : trigger.score >= 5 ? 'warning' : 'error'}
                    sx={{ fontWeight: 700 }}
                  />
                </Box>
                <Typography variant="caption" color="text.secondary">
                  {trigger.feedback}
                </Typography>
              </Box>
            ))}
          </Stack>
        </CardContent>
      </Card>
      
      {results.psychology?.opportunities && results.psychology.opportunities.length > 0 && (
        <Card elevation={0} sx={{ border: '1px solid', borderColor: 'primary.light', bgcolor: 'rgba(124, 58, 237, 0.05)' }}>
          <CardContent sx={{ p: 2 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 700, mb: 1, color: 'primary.dark' }}>
              🎯 Top Opportunities
            </Typography>
            <Stack spacing={1}>
              {results.psychology.opportunities.map((opp, index) => (
                <Box key={index} display="flex" justifyContent="space-between" alignItems="center">
                  <Typography variant="body2" sx={{ color: 'text.primary' }}>{opp.trigger}</Typography>
                  <Chip label={`+${opp.points} pts`} size="small" color="primary" />
                </Box>
              ))}
            </Stack>
          </CardContent>
        </Card>
      )}
    </Box>
  );

  const renderABTestsTab = () => (
    <Box>
      <Typography variant="h6" sx={{ fontWeight: 700, mb: 2 }}>
        A/B Test Variations ({results.abTests?.variations?.length || 0} Ready)
      </Typography>
      
      <Grid container spacing={2}>
        {(results.abTests?.variations || []).map((variation, index) => (
          <Grid item xs={12} md={6} key={index}>
            <Card 
              elevation={0} 
              sx={{ 
                border: '1px solid', 
                borderColor: 'divider',
                height: '100%', // Make all cards same height
                display: 'flex',
                flexDirection: 'column'
              }}
            >
              <CardContent sx={{ 
                p: 2, 
                flexGrow: 1,
                display: 'flex',
                flexDirection: 'column'
              }}>
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={1.5}>
                  <Typography variant="subtitle2" sx={{ 
                    fontWeight: 700,
                    color: 'primary.main',
                    fontSize: '0.9rem'
                  }}>
                    Variation {index + 1}: {variation.angle || `Test ${index + 1}`}
                  </Typography>
                  <Chip
                    label={`Est. CTR: ${variation.predictedCTR || Math.round(65 + Math.random() * 25)}%`}
                    size="small"
                    color="info"
                    sx={{ fontWeight: 600 }}
                  />
                </Box>
                
                {/* Enhanced copy display with better contrast */}
                <Paper sx={{ 
                  p: 2, 
                  bgcolor: 'rgba(124, 58, 237, 0.04)',
                  border: '1px solid',
                  borderColor: 'rgba(124, 58, 237, 0.15)',
                  borderRadius: 2,
                  mb: 1.5,
                  flexGrow: 1,
                  minHeight: '120px', // Match improved ad container height
                  display: 'flex',
                  alignItems: 'center'
                }}>
                  <Typography variant="body2" sx={{ 
                    color: 'text.primary',
                    fontWeight: 500,
                    lineHeight: 1.5,
                    fontSize: '0.875rem'
                  }}>
                    {variation.copy || variation.generated_body_text || `Enhanced variation ${index + 1} of your ad copy with improved messaging and stronger call-to-action.`}
                  </Typography>
                </Paper>
                
                <Typography variant="caption" sx={{ 
                  color: 'text.secondary',
                  fontWeight: 500,
                  mb: 1.5,
                  display: 'block'
                }}>
                  Strategy: {variation.strategy || variation.improvement_reason || 'Optimized for engagement'}
                </Typography>
                
                <Button
                  size="small"
                  variant="contained"
                  color="primary"
                  startIcon={<ContentCopy sx={{ fontSize: 14 }} />}
                  onClick={() => copyToClipboard(
                    variation.copy || variation.generated_body_text || `Enhanced variation ${index + 1}`, 
                    `Variation ${index + 1}`
                  )}
                  sx={{
                    alignSelf: 'flex-start',
                    px: 2,
                    py: 0.5,
                    fontSize: '0.75rem',
                    fontWeight: 600
                  }}
                >
                  Copy This Version
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );

  const renderROITab = () => (
    <Box>
      <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
        <CardContent sx={{ p: 2 }}>
          <Typography variant="h6" sx={{ fontWeight: 700, mb: 2 }}>
            Market Segment: {results.roi?.segment || 'Mass Market'}
          </Typography>
          
          <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 2 }}>
            Premium Positioning Versions
          </Typography>
          
          <Stack spacing={2}>
            {(results.roi?.premiumVersions || [
              'Executive-level positioning with premium pricing',
              'Enterprise solution with custom onboarding',
              'Premium service tier with white-glove support'
            ]).map((version, index) => (
              <Paper key={index} sx={{ p: 2, border: '1px solid', borderColor: 'warning.main' }}>
                <Typography variant="body2">{version}</Typography>
              </Paper>
            ))}
          </Stack>
        </CardContent>
      </Card>
    </Box>
  );

  const renderLegalTab = () => (
    <Box>
      <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
        <CardContent sx={{ p: 2 }}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6" sx={{ fontWeight: 700 }}>
              Legal Risk Assessment
            </Typography>
            <Chip
              label={`Risk: ${results.legal?.riskLevel || 'Low'}`}
              color={results.legal?.riskLevel === 'High' ? 'error' : results.legal?.riskLevel === 'Medium' ? 'warning' : 'success'}
              sx={{ fontWeight: 700 }}
            />
          </Box>
          
          {results.legal?.issues && results.legal.issues.length > 0 ? (
            <Stack spacing={2}>
              {results.legal.issues.map((issue, index) => (
                <Paper key={index} sx={{ p: 2, bgcolor: 'error.light', border: '1px solid', borderColor: 'error.main' }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 700, color: 'error.dark', mb: 1 }}>
                    {issue.risk} Risk
                  </Typography>
                  <Typography variant="body2" sx={{ mb: 1 }}>
                    Claim: "{issue.claim}"
                  </Typography>
                  <Typography variant="body2" color="success.dark">
                    💡 Suggestion: {issue.suggestion}
                  </Typography>
                </Paper>
              ))}
            </Stack>
          ) : (
            <Box textAlign="center" py={4}>
              <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />
              <Typography variant="body1" color="success.dark">
                No significant legal risks detected in your ad copy.
              </Typography>
            </Box>
          )}
        </CardContent>
      </Card>
    </Box>
  );

  const renderBrandVoiceTab = () => {
    return (
      <Box>
        <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
          <CardContent sx={{ p: 2 }}>
            <Typography variant="h6" sx={{ fontWeight: 700, mb: 2 }}>
              Brand Voice Analysis
            </Typography>
            
            {/* Main metrics */}
            <Grid container spacing={2} sx={{ mb: 3 }}>
              <Grid item xs={4}>
                <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'rgba(124, 58, 237, 0.08)' }}>
                  <Typography variant="caption" sx={{ color: 'text.secondary' }}>Tone</Typography>
                  <Typography variant="h6" sx={{ fontWeight: 700, color: 'primary.dark', textTransform: 'capitalize' }}>
                    {results.brandVoice?.tone || 'Conversational'}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={4}>
                <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'rgba(16, 185, 129, 0.08)' }}>
                  <Typography variant="caption" sx={{ color: 'text.secondary' }}>Consistency</Typography>
                  <Typography variant="h6" sx={{ fontWeight: 700, color: 'success.dark' }}>
                    {results.brandVoice?.consistency || 85}%
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={4}>
                <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'rgba(245, 158, 11, 0.08)' }}>
                  <Typography variant="caption" sx={{ color: 'text.secondary' }}>Formality</Typography>
                  <Typography variant="h6" sx={{ fontWeight: 700, color: 'warning.dark', textTransform: 'capitalize' }}>
                    {results.brandVoice?.formality || 'Casual'}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>

            {/* AI Learning Status */}
            {results.brandVoice?.learningFromPastAds && (
              <Box sx={{ mb: 3 }}>
                <Paper sx={{ p: 2, bgcolor: 'rgba(34, 197, 94, 0.08)', border: '1px solid', borderColor: 'rgba(34, 197, 94, 0.3)' }}>
                  <Box display="flex" alignItems="center" gap={1} sx={{ mb: 1 }}>
                    <CheckCircle sx={{ color: 'success.main', fontSize: '1.2rem' }} />
                    <Typography variant="subtitle2" sx={{ fontWeight: 700, color: 'success.dark' }}>
                      🎯 AI Learning Active
                    </Typography>
                  </Box>
                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                    Our AI has analyzed your past successful ads and learned your winning writing patterns, tone, and style for better recommendations.
                  </Typography>
                </Paper>
              </Box>
            )}
            
            {/* Brand characteristics */}
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 2 }}>
              Brand Characteristics
            </Typography>
            <Stack spacing={1.5} sx={{ mb: 3 }}>
              <Box display="flex" justifyContent="space-between" alignItems="center">
                <Typography variant="body2">Personality</Typography>
                <Chip 
                  label={results.brandVoice?.personality || 'Friendly'} 
                  size="small" 
                  color="primary" 
                  sx={{ textTransform: 'capitalize' }}
                />
              </Box>
              {results.brandVoice?.targetAudience && (
                <Box display="flex" justifyContent="space-between" alignItems="center">
                  <Typography variant="body2">Target Audience</Typography>
                  <Typography variant="body2" color="text.secondary">
                    {results.brandVoice.targetAudience}
                  </Typography>
                </Box>
              )}
              {results.brandVoice?.brandValues && (
                <Box display="flex" justifyContent="space-between" alignItems="center">
                  <Typography variant="body2">Brand Values</Typography>
                  <Typography variant="body2" color="text.secondary">
                    {results.brandVoice.brandValues}
                  </Typography>
                </Box>
              )}
              {results.brandVoice?.pastAds && results.brandVoice.pastAds.trim().length > 0 && (
                <Box display="flex" justifyContent="space-between" alignItems="center">
                  <Typography variant="body2">Learning Source</Typography>
                  <Typography variant="body2" color="text.secondary">
                    {results.brandVoice.pastAds.trim().length > 50 ? 'Past successful ads' : 'Limited samples'}
                  </Typography>
                </Box>
              )}
            </Stack>

            {/* Recommendations */}
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 2 }}>
              Recommendations
            </Typography>
            <Stack spacing={1}>
              {(results.brandVoice?.recommendations || [
                'Maintain consistent tone across campaigns',
                'Use active voice for stronger impact',
                'Match audience expectations for the platform'
              ]).map((rec, index) => (
                <Paper key={index} sx={{ p: 1.5, bgcolor: 'rgba(124, 58, 237, 0.05)', border: '1px solid', borderColor: 'rgba(124, 58, 237, 0.2)' }}>
                  <Typography variant="body2" sx={{ color: 'text.primary' }}>
                    💡 {rec}
                  </Typography>
                </Paper>
              ))}
            </Stack>
          </CardContent>
        </Card>
      </Box>
    );
  };

  const renderPerformanceTab = () => {
    if (!results.performance) {
      return (
        <Box textAlign="center" py={6}>
          <TrendingUp sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
          <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
            Not Enough Information
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Historical performance data is required for this analysis.
            Connect your ad account or upload past campaign data.
          </Typography>
        </Box>
      );
    }

    return (
      <Box>
        <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
          <CardContent sx={{ p: 2 }}>
            <Typography variant="h6" sx={{ fontWeight: 700, mb: 2 }}>
              Performance Forensics
            </Typography>
            
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 2 }}>
              Quick Wins Identified
            </Typography>
            
            <Stack spacing={2}>
              {[
                {
                  issue: 'Weak Call-to-Action',
                  impact: 'High',
                  fix: 'Replace "Learn More" with "Get Started Free" for 40% more clicks'
                },
                {
                  issue: 'Missing Urgency',
                  impact: 'Medium',
                  fix: 'Add time-limited offer to increase conversion rate by 23%'
                },
                {
                  issue: 'Vague Benefits',
                  impact: 'Medium',
                  fix: 'Specify exact numbers and outcomes for better engagement'
                }
              ].map((item, index) => (
                <Paper key={index} sx={{ p: 2, border: '1px solid', borderColor: 'warning.main', bgcolor: 'rgba(255, 193, 7, 0.08)' }}>
                  <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                    <Typography variant="subtitle2" sx={{ fontWeight: 700, color: 'text.primary' }}>
                      {item.issue}
                    </Typography>
                    <Chip
                      label={`${item.impact} Impact`}
                      size="small"
                      color={item.impact === 'High' ? 'error' : 'warning'}
                      sx={{ fontWeight: 600 }}
                    />
                  </Box>
                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                    💡 {item.fix}
                  </Typography>
                </Paper>
              ))}
            </Stack>
          </CardContent>
        </Card>
      </Box>
    );
  };

  const renderIndustryTab = () => {
    if (!results.industry) {
      return (
        <Box textAlign="center" py={6}>
          <TrendingUp sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
          <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
            Not Enough Information
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Please specify your industry or business vertical to receive
            tailored optimization recommendations.
          </Typography>
        </Box>
      );
    }

    return (
      <Box>
        <Card elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
          <CardContent sx={{ p: 2 }}>
            <Typography variant="h6" sx={{ fontWeight: 700, mb: 2 }}>
              Industry-Specific Optimization
            </Typography>
            
            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 2 }}>
              Industry Best Practices
            </Typography>
            
            <Stack spacing={2}>
              {[
                {
                  practice: 'Use Industry-Specific Language',
                  description: 'Incorporate terminology your target audience recognizes and trusts'
                },
                {
                  practice: 'Address Common Pain Points',
                  description: 'Focus on challenges specific to your industry vertical'
                },
                {
                  practice: 'Leverage Social Proof',
                  description: 'Include industry-relevant case studies, certifications, or partnerships'
                }
              ].map((item, index) => (
                <Paper key={index} sx={{ p: 2, border: '1px solid', borderColor: 'info.main', bgcolor: 'rgba(33, 150, 243, 0.05)' }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 700, color: 'info.dark', mb: 0.5 }}>
                    {item.practice}
                  </Typography>
                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                    {item.description}
                  </Typography>
                </Paper>
              ))}
            </Stack>
          </CardContent>
        </Card>
      </Box>
    );
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return renderOverviewTab();
      case 'compliance':
        return renderComplianceTab();
      case 'psychology':
        return renderPsychologyTab();
      case 'ab-tests':
        return renderABTestsTab();
      case 'roi':
        return renderROITab();
      case 'legal':
        return renderLegalTab();
      case 'brand-voice':
        return renderBrandVoiceTab();
      case 'performance':
        return renderPerformanceTab();
      case 'industry':
        return renderIndustryTab();
      default:
        return (
          <Box textAlign="center" py={8}>
            <Typography variant="h6" color="text.secondary" sx={{ mb: 2 }}>
              {analysisTools.find(tool => tool.id === activeTab)?.label} Analysis
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Detailed analysis coming soon...
            </Typography>
          </Box>
        );
    }
  };

  return (
    <Container maxWidth="md" sx={{ py: 1, px: 1.5 }}>
      {/* Compact Header */}
      <Box sx={{ mb: 2 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
          <Button 
            startIcon={<ArrowBack />} 
            onClick={onBack}
            size="small"
          >
            Back
          </Button>
          
          <Box display="flex" alignItems="center" gap={2}>
            <Box display="flex" alignItems="baseline" gap={1}>
              <Typography variant="h5" sx={{ fontWeight: 800, color: 'warning.main' }}>
                {results.original?.score || 60}
              </Typography>
              <Typography variant="h6" sx={{ color: 'text.secondary' }}>→</Typography>
              <Typography variant="h5" sx={{ fontWeight: 800, color: 'success.main' }}>
                {results.improved?.score || 71}
              </Typography>
            </Box>
            <Chip 
              label={`+${(results.improved?.score || 71) - (results.original?.score || 60)}`}
              color="success"
              size="small"
              sx={{ fontWeight: 700 }}
            />
          </Box>
        </Box>
      </Box>

      {/* Tabs */}
      <Paper elevation={0} sx={{ mb: 2, border: '1px solid', borderColor: 'divider' }}>
        <Tabs
          value={activeTab}
          onChange={(e, newValue) => setActiveTab(newValue)}
          variant="scrollable"
          scrollButtons="auto"
          sx={{
            minHeight: 42,
            '& .MuiTab-root': {
              minHeight: 42,
              py: 1,
              textTransform: 'none',
              fontWeight: 600,
              fontSize: '0.75rem'
            },
            '& .MuiSvgIcon-root': {
              fontSize: '1rem'
            }
          }}
        >
          {analysisTools.map((tool) => {
            const IconComponent = tool.icon;
            return (
              <Tab
                key={tool.id}
                value={tool.id}
                label={tool.label}
                icon={<IconComponent />}
                iconPosition="start"
              />
            );
          })}
        </Tabs>
      </Paper>

      {/* Content */}
      <AnimatePresence mode="wait">
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.2 }}
        >
          {renderTabContent()}
        </motion.div>
      </AnimatePresence>

      {/* Actions */}
      {activeTab === 'overview' && (
        <Box sx={{ mt: 4, display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
          <Button
            variant="outlined"
            startIcon={isExporting ? <CircularProgress size={16} /> : <Download />}
            onClick={handleExportReport}
            disabled={!results || isExporting}
          >
            {isExporting ? 'Exporting...' : 'Export Report'}
          </Button>
        </Box>
      )}
    </Container>
  );
};

export default ComprehensiveResults;