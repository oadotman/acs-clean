# AdCopySurge Production Nginx Configuration with Security Hardening
# This configuration implements comprehensive security measures

# Hide Nginx version
server_tokens off;

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=global:10m rate=30r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# Geo-blocking (optional - uncomment to enable)
# geo $blocked_country {
#     default 0;
#     CN 1;  # China
#     RU 1;  # Russia
# }

# Real IP configuration for proxy/CDN
set_real_ip_from 172.16.0.0/12;
set_real_ip_from 192.168.0.0/16;
set_real_ip_from 10.0.0.0/8;
set_real_ip_from 127.0.0.1;
real_ip_header X-Forwarded-For;
real_ip_recursive on;

# Security map for blocking bad user agents
map $http_user_agent $blocked_agent {
    default 0;
    ~*malicious 1;
    ~*bot 1;
    ~*crawler 1;
    ~*scanner 1;
    ~*sqlmap 1;
    ~*nikto 1;
    ~*nessus 1;
    ~*masscan 1;
    ~*nmap 1;
    "" 1;  # Empty user agent
}

# Block common attack patterns
map $request_uri $blocked_uri {
    default 0;
    ~*\.(php|aspx|jsp)$ 1;
    ~*/wp-admin 1;
    ~*/wp-login 1;
    ~*/phpmyadmin 1;
    ~*/admin 1;
    ~*\.\./\.\. 1;
    ~*\.(sql|log|bak)$ 1;
}

# HTTP to HTTPS redirect server
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    # Security headers for HTTP (before redirect)
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# Main HTTPS server for API
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.adcopysurge.com;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/api.adcopysurge.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.adcopysurge.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/api.adcopysurge.com/chain.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=60s;
    resolver_timeout 2s;
    
    # DH Parameters (generate with: openssl dhparam -out /etc/nginx/dhparam.pem 4096)
    ssl_dhparam /etc/nginx/dhparam.pem;
    
    # Connection limits
    limit_conn conn_limit_per_ip 20;
    limit_conn conn_limit_per_server 1000;
    
    # Global rate limiting
    limit_req zone=global burst=50 nodelay;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(self), usb=()" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header X-Download-Options "noopen" always;
    add_header X-DNS-Prefetch-Control "off" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.paddle.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.adcopysurge.com https://*.supabase.co https://api.openai.com wss://*.supabase.co; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests" always;
    
    # Cross-Origin policies
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "cross-origin" always;
    
    # Custom security headers
    add_header X-Security-Contact "security@adcopysurge.com" always;
    add_header X-API-Version "1.0.0" always;
    
    # Security blocks
    if ($blocked_agent) {
        return 403 "Forbidden User Agent";
    }
    
    if ($blocked_uri) {
        return 403 "Forbidden URI";
    }
    
    # Geo-blocking (uncomment if enabled)
    # if ($blocked_country) {
    #     return 403 "Access denied from your location";
    # }
    
    # Request size limits
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/xml
        image/svg+xml
        text/css
        text/javascript
        text/js
        text/plain
        text/xml;
    
    # Disable access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to sensitive files
    location ~* \.(htaccess|htpasswd|ini|log|sh|sql|bak|swp|env)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Authentication endpoints (stricter rate limiting)
    location ~ ^/api/auth/(login|register|reset-password) {
        limit_req zone=login burst=5 nodelay;
        
        # Additional auth security
        add_header X-Auth-Endpoint "true" always;
        
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        
        # Proxy timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # API endpoints
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        # Block common attack patterns in URLs
        if ($request_uri ~* "(union|select|insert|delete|update|drop|exec|script|eval|expression)") {
            return 403 "Suspicious query detected";
        }
        
        # Block SQL injection attempts in query parameters
        if ($args ~* "(union|select|insert|delete|update|drop|exec|script|eval|expression)") {
            return 403 "Suspicious query parameters";
        }
        
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "https://v44954.datalix.de" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-CSRFToken, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Max-Age "86400" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://v44954.datalix.de";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-CSRFToken, X-Requested-With";
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Max-Age "86400";
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length "0";
            return 204;
        }
        
        # Proxy timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for API
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_max_temp_file_size 1024m;
    }
    
    # Health check endpoint (no rate limiting)
    location = /health {
        access_log off;
        
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Quick timeouts for health checks
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
    }
    
    # Metrics endpoint (restricted access)
    location = /metrics {
        # Allow only from localhost and monitoring servers
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        access_log off;
        
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Security reporting endpoints
    location ~ ^/security/(csp-report|ct-report|hpkp-report)$ {
        # Allow only POST requests
        if ($request_method != POST) {
            return 405;
        }
        
        access_log /var/log/nginx/security-reports.log;
        
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Static files (if serving any)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf)$ {
        limit_req zone=static burst=100 nodelay;
        
        # Long cache for static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
        
        # Security headers for static files
        add_header X-Frame-Options "DENY" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        try_files $uri =404;
    }
    
    # Favicon
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 1M;
        add_header Cache-Control "public";
    }
    
    # Robots.txt
    location = /robots.txt {
        access_log off;
        log_not_found off;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Default location - block everything else
    location / {
        return 404 "Not Found";
    }
    
    # Custom error pages
    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /error.html;
    error_page 500 501 502 503 504 505 506 507 508 510 511 /error.html;
    
    location = /error.html {
        internal;
        add_header Content-Type "application/json" always;
        return 200 '{"error":"Request could not be processed","code":"ERROR"}';
    }
    
    # Logging
    access_log /var/log/nginx/adcopysurge-api.access.log combined buffer=32k flush=5s;
    error_log /var/log/nginx/adcopysurge-api.error.log warn;
}

# Additional server for monitoring (internal only)
server {
    listen 127.0.0.1:8080;
    server_name localhost;
    
    # Nginx status (for monitoring)
    location = /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    # Basic health check
    location = /nginx_health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }
}