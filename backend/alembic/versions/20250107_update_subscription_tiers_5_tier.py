"""Update subscription tiers to support 5-tier structure

Revision ID: 20250107_5tier
Revises: 774f6afeb517
Create Date: 2025-01-07 16:20:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '20250107_5tier'
down_revision: Union[str, None] = '774f6afeb517'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # For SQLite, we need to recreate the table with the new enum
    # First, create a new enum type with the additional values
    op.execute("""
        CREATE TABLE users_new (
            id INTEGER NOT NULL,
            email VARCHAR NOT NULL,
            hashed_password VARCHAR NOT NULL,
            full_name VARCHAR NOT NULL,
            company VARCHAR,
            subscription_tier VARCHAR CHECK (subscription_tier IN (
                'free', 'growth', 'agency_standard', 'agency_premium', 'agency_unlimited', 'basic', 'pro'
            )) DEFAULT 'free',
            monthly_analyses INTEGER DEFAULT 0,
            subscription_active BOOLEAN DEFAULT 1,
            stripe_customer_id VARCHAR,
            paddle_subscription_id VARCHAR,
            paddle_plan_id VARCHAR,
            paddle_checkout_id VARCHAR,
            supabase_user_id VARCHAR,
            is_active BOOLEAN DEFAULT 1,
            email_verified BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME,
            PRIMARY KEY (id)
        )
    """)
    
    # Copy existing data if table exists
    op.execute("""
        INSERT INTO users_new (
            id, email, hashed_password, full_name, company, subscription_tier,
            monthly_analyses, subscription_active, stripe_customer_id,
            paddle_subscription_id, paddle_plan_id, paddle_checkout_id,
            supabase_user_id, is_active, email_verified, created_at, updated_at
        )
        SELECT 
            id, email, hashed_password, full_name, company, 
            CASE 
                WHEN subscription_tier = 'basic' THEN 'growth'
                WHEN subscription_tier = 'pro' THEN 'agency_unlimited'
                ELSE subscription_tier 
            END as subscription_tier,
            monthly_analyses, subscription_active, stripe_customer_id,
            paddle_subscription_id, paddle_plan_id, paddle_checkout_id,
            supabase_user_id, is_active, email_verified, created_at, updated_at
        FROM users
        WHERE EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='users')
    """)
    
    # Drop the old table if it exists and rename the new one
    op.execute("DROP TABLE IF EXISTS users")
    op.execute("ALTER TABLE users_new RENAME TO users")
    
    # Recreate indexes
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_paddle_subscription_id'), 'users', ['paddle_subscription_id'], unique=False)
    op.create_index(op.f('ix_users_supabase_user_id'), 'users', ['supabase_user_id'], unique=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Recreate the old table structure
    op.execute("""
        CREATE TABLE users_old (
            id INTEGER NOT NULL,
            email VARCHAR NOT NULL,
            hashed_password VARCHAR NOT NULL,
            full_name VARCHAR NOT NULL,
            company VARCHAR,
            subscription_tier VARCHAR CHECK (subscription_tier IN ('free', 'basic', 'pro')) DEFAULT 'free',
            monthly_analyses INTEGER DEFAULT 0,
            subscription_active BOOLEAN DEFAULT 1,
            stripe_customer_id VARCHAR,
            paddle_subscription_id VARCHAR,
            paddle_plan_id VARCHAR,
            paddle_checkout_id VARCHAR,
            supabase_user_id VARCHAR,
            is_active BOOLEAN DEFAULT 1,
            email_verified BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME,
            PRIMARY KEY (id)
        )
    """)
    
    # Copy data back, mapping new tiers to old ones
    op.execute("""
        INSERT INTO users_old (
            id, email, hashed_password, full_name, company, subscription_tier,
            monthly_analyses, subscription_active, stripe_customer_id,
            paddle_subscription_id, paddle_plan_id, paddle_checkout_id,
            supabase_user_id, is_active, email_verified, created_at, updated_at
        )
        SELECT 
            id, email, hashed_password, full_name, company,
            CASE 
                WHEN subscription_tier IN ('growth', 'agency_standard') THEN 'basic'
                WHEN subscription_tier IN ('agency_premium', 'agency_unlimited') THEN 'pro'
                ELSE 'free' 
            END as subscription_tier,
            monthly_analyses, subscription_active, stripe_customer_id,
            paddle_subscription_id, paddle_plan_id, paddle_checkout_id,
            supabase_user_id, is_active, email_verified, created_at, updated_at
        FROM users
    """)
    
    # Drop the new table and rename the old one back
    op.drop_table('users')
    op.execute("ALTER TABLE users_old RENAME TO users")
    
    # Recreate original indexes
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_paddle_subscription_id'), 'users', ['paddle_subscription_id'], unique=False)
    
    # ### end Alembic commands ###